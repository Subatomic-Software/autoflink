/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.slotterback;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Telemetry extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4379143636360879735L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Telemetry\",\"namespace\":\"org.slotterback\",\"fields\":[{\"name\":\"battery\",\"type\":\"int\"},{\"name\":\"computer\",\"type\":\"int\"},{\"name\":\"temperature\",\"type\":\"double\"},{\"name\":\"error\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Telemetry> ENCODER =
      new BinaryMessageEncoder<Telemetry>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Telemetry> DECODER =
      new BinaryMessageDecoder<Telemetry>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Telemetry> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Telemetry> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Telemetry> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Telemetry>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Telemetry to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Telemetry from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Telemetry instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Telemetry fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private int battery;
   private int computer;
   private double temperature;
   private int error;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Telemetry() {}

  /**
   * All-args constructor.
   * @param battery The new value for battery
   * @param computer The new value for computer
   * @param temperature The new value for temperature
   * @param error The new value for error
   */
  public Telemetry(java.lang.Integer battery, java.lang.Integer computer, java.lang.Double temperature, java.lang.Integer error) {
    this.battery = battery;
    this.computer = computer;
    this.temperature = temperature;
    this.error = error;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return battery;
    case 1: return computer;
    case 2: return temperature;
    case 3: return error;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: battery = (java.lang.Integer)value$; break;
    case 1: computer = (java.lang.Integer)value$; break;
    case 2: temperature = (java.lang.Double)value$; break;
    case 3: error = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'battery' field.
   * @return The value of the 'battery' field.
   */
  public int getBattery() {
    return battery;
  }


  /**
   * Sets the value of the 'battery' field.
   * @param value the value to set.
   */
  public void setBattery(int value) {
    this.battery = value;
  }

  /**
   * Gets the value of the 'computer' field.
   * @return The value of the 'computer' field.
   */
  public int getComputer() {
    return computer;
  }


  /**
   * Sets the value of the 'computer' field.
   * @param value the value to set.
   */
  public void setComputer(int value) {
    this.computer = value;
  }

  /**
   * Gets the value of the 'temperature' field.
   * @return The value of the 'temperature' field.
   */
  public double getTemperature() {
    return temperature;
  }


  /**
   * Sets the value of the 'temperature' field.
   * @param value the value to set.
   */
  public void setTemperature(double value) {
    this.temperature = value;
  }

  /**
   * Gets the value of the 'error' field.
   * @return The value of the 'error' field.
   */
  public int getError() {
    return error;
  }


  /**
   * Sets the value of the 'error' field.
   * @param value the value to set.
   */
  public void setError(int value) {
    this.error = value;
  }

  /**
   * Creates a new Telemetry RecordBuilder.
   * @return A new Telemetry RecordBuilder
   */
  public static org.slotterback.Telemetry.Builder newBuilder() {
    return new org.slotterback.Telemetry.Builder();
  }

  /**
   * Creates a new Telemetry RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Telemetry RecordBuilder
   */
  public static org.slotterback.Telemetry.Builder newBuilder(org.slotterback.Telemetry.Builder other) {
    if (other == null) {
      return new org.slotterback.Telemetry.Builder();
    } else {
      return new org.slotterback.Telemetry.Builder(other);
    }
  }

  /**
   * Creates a new Telemetry RecordBuilder by copying an existing Telemetry instance.
   * @param other The existing instance to copy.
   * @return A new Telemetry RecordBuilder
   */
  public static org.slotterback.Telemetry.Builder newBuilder(org.slotterback.Telemetry other) {
    if (other == null) {
      return new org.slotterback.Telemetry.Builder();
    } else {
      return new org.slotterback.Telemetry.Builder(other);
    }
  }

  /**
   * RecordBuilder for Telemetry instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Telemetry>
    implements org.apache.avro.data.RecordBuilder<Telemetry> {

    private int battery;
    private int computer;
    private double temperature;
    private int error;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.slotterback.Telemetry.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.battery)) {
        this.battery = data().deepCopy(fields()[0].schema(), other.battery);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.computer)) {
        this.computer = data().deepCopy(fields()[1].schema(), other.computer);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.temperature)) {
        this.temperature = data().deepCopy(fields()[2].schema(), other.temperature);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.error)) {
        this.error = data().deepCopy(fields()[3].schema(), other.error);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Telemetry instance
     * @param other The existing instance to copy.
     */
    private Builder(org.slotterback.Telemetry other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.battery)) {
        this.battery = data().deepCopy(fields()[0].schema(), other.battery);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.computer)) {
        this.computer = data().deepCopy(fields()[1].schema(), other.computer);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.temperature)) {
        this.temperature = data().deepCopy(fields()[2].schema(), other.temperature);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.error)) {
        this.error = data().deepCopy(fields()[3].schema(), other.error);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'battery' field.
      * @return The value.
      */
    public int getBattery() {
      return battery;
    }


    /**
      * Sets the value of the 'battery' field.
      * @param value The value of 'battery'.
      * @return This builder.
      */
    public org.slotterback.Telemetry.Builder setBattery(int value) {
      validate(fields()[0], value);
      this.battery = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'battery' field has been set.
      * @return True if the 'battery' field has been set, false otherwise.
      */
    public boolean hasBattery() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'battery' field.
      * @return This builder.
      */
    public org.slotterback.Telemetry.Builder clearBattery() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'computer' field.
      * @return The value.
      */
    public int getComputer() {
      return computer;
    }


    /**
      * Sets the value of the 'computer' field.
      * @param value The value of 'computer'.
      * @return This builder.
      */
    public org.slotterback.Telemetry.Builder setComputer(int value) {
      validate(fields()[1], value);
      this.computer = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'computer' field has been set.
      * @return True if the 'computer' field has been set, false otherwise.
      */
    public boolean hasComputer() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'computer' field.
      * @return This builder.
      */
    public org.slotterback.Telemetry.Builder clearComputer() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'temperature' field.
      * @return The value.
      */
    public double getTemperature() {
      return temperature;
    }


    /**
      * Sets the value of the 'temperature' field.
      * @param value The value of 'temperature'.
      * @return This builder.
      */
    public org.slotterback.Telemetry.Builder setTemperature(double value) {
      validate(fields()[2], value);
      this.temperature = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'temperature' field has been set.
      * @return True if the 'temperature' field has been set, false otherwise.
      */
    public boolean hasTemperature() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'temperature' field.
      * @return This builder.
      */
    public org.slotterback.Telemetry.Builder clearTemperature() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'error' field.
      * @return The value.
      */
    public int getError() {
      return error;
    }


    /**
      * Sets the value of the 'error' field.
      * @param value The value of 'error'.
      * @return This builder.
      */
    public org.slotterback.Telemetry.Builder setError(int value) {
      validate(fields()[3], value);
      this.error = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'error' field has been set.
      * @return True if the 'error' field has been set, false otherwise.
      */
    public boolean hasError() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'error' field.
      * @return This builder.
      */
    public org.slotterback.Telemetry.Builder clearError() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Telemetry build() {
      try {
        Telemetry record = new Telemetry();
        record.battery = fieldSetFlags()[0] ? this.battery : (java.lang.Integer) defaultValue(fields()[0]);
        record.computer = fieldSetFlags()[1] ? this.computer : (java.lang.Integer) defaultValue(fields()[1]);
        record.temperature = fieldSetFlags()[2] ? this.temperature : (java.lang.Double) defaultValue(fields()[2]);
        record.error = fieldSetFlags()[3] ? this.error : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Telemetry>
    WRITER$ = (org.apache.avro.io.DatumWriter<Telemetry>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Telemetry>
    READER$ = (org.apache.avro.io.DatumReader<Telemetry>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.battery);

    out.writeInt(this.computer);

    out.writeDouble(this.temperature);

    out.writeInt(this.error);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.battery = in.readInt();

      this.computer = in.readInt();

      this.temperature = in.readDouble();

      this.error = in.readInt();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.battery = in.readInt();
          break;

        case 1:
          this.computer = in.readInt();
          break;

        case 2:
          this.temperature = in.readDouble();
          break;

        case 3:
          this.error = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










